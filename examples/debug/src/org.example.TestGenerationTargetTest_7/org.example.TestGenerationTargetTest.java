/*
 * This file was automatically generated by EvoSuite
 * Mon May 01 04:54:27 GMT 2023
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.example.TestGenerationTarget;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestGenerationTargetTest {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.example.TestGenerationTarget"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TestGenerationTargetTest.class.getClassLoader() ,
      "org.example.TestGenerationTarget"
    );
  } 

  private static void resetClasses() {
  }

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "[mJ@U9SzQk";
      TestGenerationTarget.isPalindrome(string0);
      int int0 = (-1);
      TestGenerationTarget.isPrime(int0);
      int int1 = 1901;
      TestGenerationTarget.isPrime(int1);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[4];
      int int0 = (-128);
      intArray0[0] = int0;
      int int1 = (-675);
      intArray0[1] = int1;
      int int2 = 2910;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      TestGenerationTarget.findMax(intArray0);
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1;
      intArray0[0] = int0;
      int int1 = (-1323);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 21;
      intArray0[3] = int3;
      int int4 = (-1339);
      intArray0[4] = int4;
      TestGenerationTarget.findMax(intArray0);
      String string0 = "  )";
      TestGenerationTarget.isPalindrome(string0);
      int int5 = 54;
      TestGenerationTarget.isPrime(int5);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPalindrome(string0);
      String string1 = "";
      TestGenerationTarget.isPalindrome(string1);
      String string2 = "";
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-5824);
      intArray0[0] = int0;
      int int1 = (-523);
      intArray0[1] = int1;
      int int2 = TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPrime(int2);
      String string0 = "j4e";
      TestGenerationTarget.isPalindrome(string0);
      String string1 = "";
      TestGenerationTarget.isPalindrome(string1);
      String string2 = "";
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.findMax(intArray0);
      String string3 = null;
      TestGenerationTarget.isPalindrome(string3);
      int int3 = TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPrime(int3);
      TestGenerationTarget.findMax(intArray0);
      int int4 = 743;
      TestGenerationTarget.isPrime(int4);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      int int5 = 1472;
      TestGenerationTarget.isPrime(int5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      TestGenerationTarget.isPalindrome(string0);
      int int0 = 1887;
      TestGenerationTarget.isPrime(int0);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      TestGenerationTarget.findMax(intArray0);
      String string1 = "";
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[1];
      int int0 = 1847;
      intArray0[0] = int0;
      TestGenerationTarget.findMax(intArray0);
      String string0 = "A%86&O";
      TestGenerationTarget.isPalindrome(string0);
      int[] intArray1 = new int[4];
      int int1 = (-2089297101);
      intArray1[0] = int1;
      int int2 = (-2920);
      intArray1[1] = int2;
      int int3 = 1;
      intArray1[2] = int3;
      int int4 = 67;
      intArray1[3] = int4;
      TestGenerationTarget.findMax(intArray1);
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 83;
      TestGenerationTarget.isPrime(int0);
      int int1 = (-935);
      TestGenerationTarget.isPrime(int1);
      int[] intArray0 = new int[6];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int1;
      int int2 = (-968);
      intArray0[5] = int2;
      TestGenerationTarget.findMax(intArray0);
      String string0 = "-a63o{p>j(U)I*JG-";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.findMax(intArray0);
      int int3 = 986;
      TestGenerationTarget.isPrime(int3);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.findMax(intArray0);
      int int4 = 715;
      TestGenerationTarget.isPrime(int4);
      int int5 = 5;
      TestGenerationTarget.isPrime(int5);
      TestGenerationTarget.isPrime(intArray0[2]);
      String string1 = null;
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget.isPrime(intArray0[2]);
      int int6 = (-2076);
      TestGenerationTarget.isPrime(int6);
      TestGenerationTarget.isPrime(intArray0[5]);
      String string2 = "Array cannot be null or empty";
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      int int7 = 1472;
      TestGenerationTarget.isPrime(int7);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
         verifyException("org.example.TestGenerationTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
         verifyException("org.example.TestGenerationTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1251);
      TestGenerationTarget.isPrime(int0);
      int int1 = (-3240);
      TestGenerationTarget.isPrime(int1);
      String string0 = "Array cannot be null or empty";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      int int2 = 0;
      intArray0[1] = int2;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int1;
      intArray0[5] = int1;
      intArray0[6] = int1;
      TestGenerationTarget.findMax(intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 41;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 304;
      intArray0[2] = int2;
      int int3 = (-2091534442);
      intArray0[3] = int3;
      int int4 = 3802;
      intArray0[4] = int4;
      TestGenerationTarget.findMax(intArray0);
      String string0 = ",iOMO{;|(%Y";
      TestGenerationTarget.isPalindrome(string0);
      int int5 = 1105;
      TestGenerationTarget.isPrime(int5);
      String string1 = "Ve]Z3`9/_W6i2gQf,_";
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget.isPalindrome(string0);
      int int6 = 9;
      TestGenerationTarget.isPrime(int6);
  }
}
