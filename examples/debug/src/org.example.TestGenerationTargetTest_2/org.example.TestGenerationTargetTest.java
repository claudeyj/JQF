/*
 * This file was automatically generated by EvoSuite
 * Mon May 08 20:32:08 CDT 2023
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import org.example.TestGenerationTarget;

public class TestGenerationTargetTest {

  @Test
  public void test00()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[9];
      int int0 = 7;
      intArray0[0] = int0;
      int int1 = 402;
      intArray0[1] = int1;
      int int2 = (-842618427);
      intArray0[2] = int2;
      int int3 = (-2894);
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      int int5 = (-399);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = (-474);
      intArray0[7] = int7;
      int int8 = 1975;
      intArray0[8] = int8;
      TestGenerationTarget.findMax(intArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[9];
      int int0 = (-172);
      intArray0[0] = int0;
      int int1 = (-65);
      intArray0[1] = int1;
      int int2 = 1;
      intArray0[2] = int2;
      int int3 = (-3234);
      intArray0[3] = int3;
      int int4 = (-5741);
      intArray0[4] = int4;
      int int5 = 8;
      intArray0[5] = int5;
      int int6 = 1698;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = (-1941321678);
      intArray0[8] = int8;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[9];
      int int0 = 5;
      intArray0[0] = int0;
      int int1 = (-1267);
      intArray0[1] = int1;
      int int2 = 1698;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 2899;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 1306;
      intArray0[6] = int6;
      int int7 = (-2224);
      intArray0[7] = int7;
      int int8 = 3448;
      intArray0[8] = int8;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[9];
      int int0 = 5;
      intArray0[0] = int0;
      int int1 = (-2744);
      intArray0[1] = int1;
      int int2 = 2;
      intArray0[2] = int2;
      int int3 = (-3775);
      intArray0[3] = int3;
      int int4 = 1209;
      intArray0[4] = int4;
      int int5 = 465;
      intArray0[5] = int5;
      int int6 = (-1);
      intArray0[6] = int6;
      int int7 = 1;
      intArray0[7] = int7;
      int int8 = 13;
      intArray0[8] = int8;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[4];
      int int9 = (-1784);
      intArray1[0] = int9;
      int int10 = 6;
      intArray1[1] = int10;
      int int11 = 2499;
      intArray1[2] = int11;
      int int12 = 8;
      intArray1[3] = int12;
      TestGenerationTarget.findMax(intArray1);
      int[] intArray2 = null;
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-1551);
      TestGenerationTarget.isPrime(int0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-2556);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = int0;
      intArray1[1] = int0;
      intArray1[2] = int0;
      intArray1[3] = int0;
      intArray1[4] = int0;
      intArray1[5] = int0;
      intArray1[6] = int0;
      intArray1[7] = int0;
      TestGenerationTarget.findMax(intArray1);
      String string0 = "\"er6q";
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-1);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[3];
      int int1 = 0;
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1);
      intArray0[1] = int1;
      int int2 = 4409;
      intArray0[2] = int2;
      int int3 = 2339;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      TestGenerationTarget.findMax(intArray0);
      String string0 = "UO|ZcNk_mkx:mAz";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      int int5 = (-2491);
      TestGenerationTarget.isPrime(int5);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1348);
      intArray0[1] = int1;
      int int2 = 2;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = (-2556);
      intArray0[4] = int4;
      TestGenerationTarget.findMax(intArray0);
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int int5 = (-1);
      TestGenerationTarget.isPrime(int5);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = null;
      TestGenerationTarget.isPalindrome(string0);
      int[] intArray0 = new int[7];
      int int0 = 2986;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1027;
      intArray0[2] = int2;
      int int3 = (-3222);
      intArray0[3] = int3;
      int int4 = 9;
      intArray0[4] = int4;
      int int5 = 2;
      intArray0[5] = int5;
      int int6 = 450;
      intArray0[6] = int6;
      TestGenerationTarget.findMax(intArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-661);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget.isPrime(int0);
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      String string1 = "";
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget.findMax(intArray0);
      String string2 = "X[#pVlj";
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.isPalindrome(string2);
      int int1 = 2543;
      TestGenerationTarget.isPrime(int1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      int int0 = 13;
      TestGenerationTarget.isPrime(int0);
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = int0;
      intArray1[1] = int1;
      int int2 = 176;
      intArray1[2] = int2;
      intArray1[3] = int1;
      intArray1[4] = int1;
      intArray1[5] = int1;
      intArray1[6] = int1;
      int int3 = (-1391);
      intArray1[7] = int3;
      intArray1[8] = int0;
      TestGenerationTarget.findMax(intArray1);
      int int4 = 1046;
      TestGenerationTarget.isPrime(int4);
      String string1 = "fgvhh1>t%jv+Mw*W\\";
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget.findMax(intArray1);
      int int5 = (-2059573504);
      TestGenerationTarget.isPrime(int5);
      String string2 = "Array cannot be null or empty";
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.findMax(intArray1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = null;
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      String string1 = "\"b'U$";
      TestGenerationTarget.isPalindrome(string1);
      int[] intArray0 = new int[1];
      int int0 = TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget.isPalindrome(string0);
      int int1 = 1;
      TestGenerationTarget.isPrime(int1);
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 1415;
      intArray0[1] = int1;
      intArray0[2] = int0;
      int int2 = 13;
      intArray0[3] = int2;
      int int3 = 340;
      intArray0[4] = int3;
      int int4 = 0;
      intArray0[5] = int4;
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      int int5 = (-648);
      TestGenerationTarget.isPrime(int5);
      String string0 = null;
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      int int6 = 1423;
      TestGenerationTarget.isPrime(int6);
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1892685218);
      int int1 = (-1208);
      intArray0[1] = int1;
      int int2 = (-1095);
      int int3 = 22;
      intArray0[3] = intArray0[2];
      TestGenerationTarget.findMax(intArray0);
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      int int4 = 9;
      TestGenerationTarget.isPrime(int4);
      int int5 = (-1);
      TestGenerationTarget.isPrime(int5);
      TestGenerationTarget.isPalindrome(string0);
      String string1 = "6#7qs5M>8D";
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget.findMax(intArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1575);
      TestGenerationTarget.isPrime(int0);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPrime(intArray0[4]);
      TestGenerationTarget.findMax(intArray0);
      String string0 = "#61 $";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      String string1 = "";
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget.findMax(intArray0);
      String string2 = "ibh6";
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPalindrome(string2);
  }
}
