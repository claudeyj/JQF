/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 20 10:50:34 CDT 2023
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.example.TestGenerationTarget;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestGenerationTargetTest {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.example.TestGenerationTarget"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TestGenerationTargetTest.class.getClassLoader() ,
      "org.example.TestGenerationTarget"
    );
  } 

  private static void resetClasses() {
  }

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      String string0 = "U2";
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "j[";
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1);
      TestGenerationTarget.isPrime(int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 852;
      TestGenerationTarget.isPrime(int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      int int0 = 822;
      TestGenerationTarget.isPrime(int0);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      int int1 = TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = int0;
      intArray1[1] = int0;
      int int2 = 5222;
      intArray1[2] = int2;
      intArray1[3] = int0;
      intArray1[4] = int1;
      TestGenerationTarget.findMax(intArray1);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      int int3 = TestGenerationTarget.findMax(intArray0);
      String string1 = "_D^,p<_WOG'e";
      TestGenerationTarget.isPalindrome(string1);
      int int4 = 0;
      TestGenerationTarget.isPrime(int4);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPrime(int1);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray1);
      TestGenerationTarget.isPrime(int3);
      String string2 = "";
      TestGenerationTarget.isPalindrome(string2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[4];
      int int0 = 789;
      intArray0[0] = int0;
      int int1 = 2768;
      intArray0[1] = int1;
      int int2 = 1;
      intArray0[2] = int2;
      int int3 = 1891;
      intArray0[3] = int3;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[3];
      int int4 = (-1);
      intArray1[0] = int4;
      int int5 = 727;
      intArray1[1] = int5;
      int int6 = 109;
      intArray1[2] = int6;
      TestGenerationTarget.findMax(intArray1);
      int[] intArray2 = new int[2];
      int int7 = 929;
      intArray2[0] = int7;
      int int8 = 0;
      intArray2[1] = int8;
      int int9 = TestGenerationTarget.findMax(intArray2);
      int int10 = (-1);
      TestGenerationTarget.isPrime(int10);
      TestGenerationTarget.isPrime(int9);
      TestGenerationTarget.isPrime(intArray1[0]);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.isPalindrome(string0);
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-2325);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 1185;
      intArray0[3] = int3;
      int int4 = 239;
      intArray0[4] = int4;
      int int5 = (-1633);
      intArray0[5] = int5;
      TestGenerationTarget.findMax(intArray0);
      String string1 = "GBf(?@Y";
      TestGenerationTarget.isPalindrome(string1);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      String string2 = null;
      TestGenerationTarget.isPalindrome(string2);
      TestGenerationTarget.isPrime(int5);
      String string3 = "";
      TestGenerationTarget.isPalindrome(string3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "j[";
      TestGenerationTarget.isPalindrome(string0);
      String string1 = "F!:k_o/iRF!yNF";
      TestGenerationTarget.isPalindrome(string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      TestGenerationTarget.findMax(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      TestGenerationTarget.isPalindrome(string0);
      String string1 = "";
      TestGenerationTarget.isPalindrome(string1);
      int int0 = 2;
      TestGenerationTarget.isPrime(int0);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget.findMax(intArray0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-1868);
      TestGenerationTarget.isPrime(int0);
      int int1 = (-838);
      TestGenerationTarget.isPrime(int1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
         verifyException("org.example.TestGenerationTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      TestGenerationTarget.findMax(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 4;
      int[] intArray0 = new int[2];
      int int1 = 9;
      intArray0[1] = int0;
      TestGenerationTarget.findMax(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[5];
      int int0 = 2689;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-455);
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-3252);
      intArray0[4] = int4;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[2];
      int int5 = 0;
      intArray1[0] = int5;
      int int6 = 1292;
      intArray1[1] = int6;
      TestGenerationTarget.findMax(intArray1);
      int[] intArray2 = new int[1];
      int int7 = 0;
      intArray2[0] = int7;
      TestGenerationTarget.findMax(intArray2);
      int[] intArray3 = new int[6];
      int int8 = (-2309);
      intArray3[0] = int8;
      int int9 = 0;
      intArray3[1] = int9;
      int int10 = 0;
      intArray3[2] = int10;
      int int11 = 0;
      intArray3[3] = int11;
      int int12 = 629;
      intArray3[4] = int12;
      int int13 = 0;
      intArray3[5] = int13;
      TestGenerationTarget.findMax(intArray3);
      int int14 = (-380);
      TestGenerationTarget.isPrime(int14);
      TestGenerationTarget.findMax(intArray3);
      TestGenerationTarget.isPrime(int6);
      TestGenerationTarget.findMax(intArray3);
      int int15 = (-144);
      TestGenerationTarget.isPrime(int15);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
         verifyException("org.example.TestGenerationTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 5113;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 305;
      intArray0[8] = int8;
      TestGenerationTarget.findMax(intArray0);
      int[] intArray1 = new int[9];
      int int9 = 3421;
      intArray1[0] = int9;
      int int10 = (-1);
      intArray1[1] = int10;
      int int11 = 523;
      intArray1[2] = int11;
      int int12 = (-854);
      intArray1[3] = int12;
      int int13 = (-1125);
      intArray1[4] = int13;
      int int14 = (-2185);
      intArray1[5] = int14;
      int int15 = 0;
      intArray1[6] = int15;
      int int16 = (-2242);
      intArray1[7] = int16;
      int int17 = 0;
      intArray1[8] = int17;
      TestGenerationTarget.findMax(intArray1);
      int[] intArray2 = new int[0];
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
         verifyException("org.example.TestGenerationTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        TestGenerationTarget.findMax(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be null or empty
         //
         verifyException("org.example.TestGenerationTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      TestGenerationTarget.isPalindrome(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 11;
      TestGenerationTarget.isPrime(int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "t+OwvB";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int[] intArray0 = new int[2];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = (-1298);
      intArray0[1] = int1;
      TestGenerationTarget.findMax(intArray0);
      int int2 = (-1836);
      TestGenerationTarget.isPrime(int2);
      TestGenerationTarget.isPrime(int2);
      String string1 = "~EF@ P:yIqa&;";
      TestGenerationTarget.isPalindrome(string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 63;
      TestGenerationTarget.isPrime(int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 852;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[5] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      TestGenerationTarget.findMax(intArray0);
      int int1 = 9;
      TestGenerationTarget.isPrime(int1);
      TestGenerationTarget.isPrime(int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "ZDeBh+eu(Ma%I+Y";
      TestGenerationTarget.isPalindrome(string0);
      TestGenerationTarget testGenerationTarget0 = new TestGenerationTarget();
      int int0 = 0;
      int int1 = 1;
      int int2 = 1;
      int int3 = (-1471);
      int int4 = 607460261;
      int int5 = 41;
      int int6 = (-3178);
      int int7 = 1;
      int[] intArray0 = new int[7];
      int int8 = 9;
      int int9 = 2;
      intArray0[1] = int9;
      int int10 = (-1114);
      intArray0[2] = int10;
      intArray0[3] = int7;
      int int11 = 7;
      intArray0[4] = int11;
      int int12 = (-2038);
      intArray0[5] = int12;
      int int13 = 607460261;
      intArray0[6] = int13;
      TestGenerationTarget.findMax(intArray0);
      // Undeclared exception!
      TestGenerationTarget.isPrime(intArray0[6]);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "(5e6!A4?CyV@hI/u(";
      TestGenerationTarget.isPalindrome(string0);
  }
}


